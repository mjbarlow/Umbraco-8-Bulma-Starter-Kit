@using U8StarterKit.Web.Extensions
@using U8StarterKit.Web.Models.Umbraco
@using U8StarterKit.Web.Models.ViewModels
@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>

@{
    var row = new RowElement(Model);
    foreach (var rowContent in row.RowContent)
    {
        switch (rowContent.ContentType.Alias)
        {
            case "productsElement":
                foreach (var productNode in new ProductsElement(rowContent).Products)
                {
                    @RenderRowItem(row, productNode, "ProductElement")
                }
                break;
            case "peopleElement":
                foreach (var personNode in new PeopleElement(rowContent).People)
                {
                    @RenderRowItem(row, personNode, "PersonElement")
                }
                break;
            case "blogsElement":
                var blogsElement = new BlogsElement(rowContent);
                var blogsNode = blogsElement.Blog.Select(x => new Blog(x)).FirstOrDefault();
                var blogs = blogsNode.Children.Select(x => new Blogpost(x)).Take((int)blogsElement.ItemsToShow);
                foreach (var blogNode in blogs)
                {
                    @RenderRowItem(row, blogNode, "BlogElement")
                }
                break;
            case "ctaElement":
                @Html.Partial($"~/Views/Partials/Elements/{rowContent.ContentType.Alias}.cshtml", rowContent)
                break;
            case "titleElement":
                <div class="column is-full">
                    @Html.Partial($"~/Views/Partials/Elements/{rowContent.ContentType.Alias}.cshtml", rowContent)
                </div>
                break;



                default:
                    @RenderRowItem(row, rowContent)
                    break;
            }
        }
}

@helper RenderRowItem(RowElement row, IPublishedElement rowContent)
{
    <div class="column @(row.ColumnWidth.HasValue() ? $"{row.ColumnWidth}-tablet" : "")">
        @Html.Partial($"~/Views/Partials/Elements/{rowContent.ContentType.Alias}.cshtml", rowContent)
    </div>
}

@helper RenderRowItem(RowElement row, IPublishedContent rowContent, string viewName)
{
    <div class="column @(row.ColumnWidth.HasValue() ? $"{row.ColumnWidth}-tablet" : "")">
        @Html.Partial($"~/Views/Partials/Elements/{viewName}.cshtml", rowContent)
    </div>
}
