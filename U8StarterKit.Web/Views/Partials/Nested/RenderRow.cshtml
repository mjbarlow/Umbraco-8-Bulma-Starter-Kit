@using U8StarterKit.Web.Extensions
@using U8StarterKit.Web.Models.Umbraco
@using U8StarterKit.Web.Models.ViewModels
@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedElement>

@{
    if (Model.HasValue())
    {
        var row = new RowElement(Model);

        if (row.RowContent.HasValue())
        {
            foreach (var rowContent in row.RowContent)
            {
                switch (rowContent.ContentType.Alias)
                {
                    case "blogsElement":

                        var blogsElement = new BlogsElement(rowContent);
                        var blogsNode = blogsElement.Blog.Select(x => new Blog(x)).FirstOrDefault();
                        var blogs = blogsNode.Children.Select(x => new Blogpost(x)).Take((int)blogsElement.ItemsToShow);
                        var itemsPerRow = blogsElement.ItemsPerRow.ToString();


                        @RenderSectionStart()
                        @RenderRowItem(new TitleElement(rowContent), "TitleElement", "1")
                        foreach (var blogNode in blogs)
                        {
                            @RenderRowItem(blogNode, "BlogElement", itemsPerRow)
                        }
                        @RenderSectionEnd()
                        break;

                    case "ctaElement":
                        @Html.Partial($"~/Views/Partials/Elements/{rowContent.ContentType.Alias}.cshtml", rowContent)
                        break;

                    case "productsElement":
                        var productsElement = new ProductsElement(rowContent);

                        @RenderSectionStart()
                        @RenderRowItem(new TitleElement(rowContent), "TitleElement", "1")
                        foreach (var productNode in productsElement.Products)
                        {
                            @RenderRowItem(productNode, "ProductElement", productsElement.ItemsPerRow.ToString())
                        }
                        @RenderSectionEnd()
                        break;

                    case "peopleElement":
                        var peopleElement = new PeopleElement(rowContent);

                        @RenderSectionStart()
                        @RenderRowItem(new TitleElement(rowContent), "TitleElement", "1")

                        foreach (var personNode in peopleElement.People)
                        {
                            @RenderRowItem(personNode, "PersonElement",peopleElement.ItemsPerRow.ToString())
                        }
                        @RenderSectionEnd()
                        break;

                    default:
                        @RenderRowItem(rowContent, rowContent.ContentType.Alias, "1")
                        break;
                }
            }
        }
    }
}

@helper RenderRowItem(IPublishedElement rowContent, string itemsPerRow)
{
    @RenderRowItem(rowContent, rowContent.ContentType.Alias, itemsPerRow)
}

@helper RenderRowItem(IPublishedElement rowContent, string viewName, string itemsPerRow)
{
    <div class="column @ColumnClass(itemsPerRow)">
        @Html.Partial($"~/Views/Partials/Elements/{viewName}.cshtml", rowContent)
    </div>
}

@functions  {
    string ColumnClass(string itemsPerRow)
    {
        var result = "is-12";
        switch (itemsPerRow)
        {
            case "2":
                result = "is-6";
                break;
            case "3":
                result = "is-4";
                break;
            case "4":
                result = "is-3";
                break;
        }
        return result;
    }
}

@helper RenderSectionStart()
{
    @:<section class="section section-gray">
        @:<div class="container">
            @:<div class="columns is-multiline">
}

@helper RenderSectionEnd()
{
@:</div>
@:</div>
@:</section>
}