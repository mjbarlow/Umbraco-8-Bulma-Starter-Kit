@inherits Umbraco.Web.Mvc.UmbracoViewPage<BlogsViewModel>
@using U8StarterKit.Web.Models.Umbraco
@using U8StarterKit.Web.Extensions
@using U8StarterKit.Web.Models.ViewModels
@{
    var numberOfPosts = (int) Model.ItemsToShow;
}
@{
    if (Model.Blog == null || Model.BlogsPosts.Count == 0)
    {
        <div class="column has-text-centered">
            <p class="is-size-4">There are no posts at this time, try again later.</p>
        </div>
        return;
    }

    //Gets all blogposts to calculate pages
    var blogposts = Model.BlogsPosts.OrderBy(x => x.CreateDate).ToList();
    var pageCount = (int)Math.Ceiling((double)blogposts.Count / (double)numberOfPosts);
    //gets the page from the querystring and sets it to one if it is out of range
    var page = 1;
    if (!string.IsNullOrEmpty(Request.QueryString["page"]))
    {
        int.TryParse(Request.QueryString["page"], out page);
        if (page <= 0 || page > pageCount)
        {
            page = 1;
        }
    }
    //Gets the blogposts for the current page
    var pagedBlogposts = blogposts.Skip((page - 1) * numberOfPosts).Take(numberOfPosts).ToList();

    if (pagedBlogposts.Count > 0)
    {
        @Html.Raw(Model.IsHalfWidth ? "<div class=\"columns is-multiline\">" : "")
            foreach (var postNode in pagedBlogposts)
            {
                var post = new Blogpost(postNode);
                @Html.Raw(Model.IsHalfWidth ? "<div class=\"column is-half-tablet\">" : "")
                    @Html.Partial("~/Views/Partials/Elements/BlogElement.cshtml", post)
                @Html.Raw(Model.IsHalfWidth ? "</div>" : "")
            }
        @Html.Raw(Model.IsHalfWidth ? "</div>" : "") 
    }

    if (blogposts.Count > numberOfPosts && Model.HasPaging)
    {
        <div class="buttons is-centered">
            @*@if (page <= 1)
                {
                    <span class="button is-light is-disabled is-medium">Prev</span>
                }
                else
                {
                    <a class="button is-link is-medium" href="@(Model.Content.Url + "?page=" + (page - 1))">Prev</a>
                }*@

            @for (int i = 1; i <= pageCount; i++)
            {
                <a class="button is-medium @(page == i ? "is-light" : "is-link")" href="@("?page=" + i)">@i</a>
            }
            @*@if (page == pageCount)
                {
                    <span class="button is-light is-disabled is-medium">Next</span>
                }
                else
                {
                    <a class="button is-link is-medium " href="@(Model.Content.Url + "?page=" + (page + 1))">Next</a>
                }*@
        </div>
    }
}