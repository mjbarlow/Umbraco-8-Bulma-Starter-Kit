@inherits UmbracoViewPage<Blog>
@using U8StarterKit.Web.Models.Umbraco
@using U8StarterKit.Web.Models.ViewModels;
@using U8StarterKit.Web.Extensions;

@{
    Layout = "master.cshtml";

    var blogItems = Model.Children.Select(x => new Blogpost(x)).OrderBy(x => x.CreateDate).ToList();
    var hasPaging = true;
    var numberOfPosts = (int)Model.ItemsToShow;
    var pageCount = (int)Math.Ceiling((double)blogItems.Count / (double)numberOfPosts);
    var page = SetPageNumber(pageCount);
    var pagedBlogposts = blogItems.Skip((page - 1) * numberOfPosts).Take(numberOfPosts).ToList();
}

@Html.Partial("~/Views/Partials/SectionHeader.cshtml", new HeaderSection(Model))

@Html.Partial("~/Views/Partials/Renderers/RenderSections.cshtml", Model.NestedContentBefore)

@if (!blogItems.HasValue())
{
    <div class="column has-text-centered">
        <p class="is-size-4">There are no posts at this time, try again later.</p>
    </div>
    return;
}

@if (pagedBlogposts.Count > 0)
{
    @SectionHelper.RenderSectionStart(Model.BackgroundColor?.Label, true)

    foreach (var blogPost in pagedBlogposts)
    {
        <div class="column @RazorHelper.ColumnClass(Model.ItemsPerRow?.ToString())">
            @Html.Partial("~/Views/Partials/Nested/Item/BlogItem.cshtml", blogPost)
        </div>
    }

    if (blogItems.Count > numberOfPosts && hasPaging)
    {
        <div class="column is-12">
            <div class="buttons is-centered">
                @for (int i = 1; i <= pageCount; i++)
                {
                    <a class="button is-medium @(page == i ? "is-light" : "is-link")" href="@("?page=" + i)">@i</a>
                }
            </div>
        </div>
    }
    @SectionHelper.RenderSectionEnd()
}
@Html.Partial("~/Views/Partials/Renderers/RenderSections.cshtml", Model.NestedContentAfter)




@functions {
    //gets the page from the querystring and sets it to one if it is out of range
    int SetPageNumber(int pageCount)
    {
        var page = 1;
        if (!string.IsNullOrEmpty(Request.QueryString["page"]))
        {
            int.TryParse(Request.QueryString["page"], out page);
            if (page <= 0 || page > pageCount)
            {
                page = 1;
            }
        }
        return page;
    }
}